# Deploying to play store  quasar-capacitor applications 
 ## **Get your quasar-capacitor app ready**
### **1. install android studio**
- install android studio **https://developer.android.com/studio/install.html**
- install oracle jdk **https://www.oracle.com/kw/java/technologies/downloads/** tar or unzip (any location you want)
- set environement variables
```
   export JAVA_HOME="/usr/local/jdk-oracle-17.0.8"
export JDK_HOME="/usr/local/jdk-oracle-17.0.8"
Export  STUDIO_JDK="/usr/local/jdk-oracle-17.0.8"
ENV ANDROID_HOME="/usr/local/jdk-oracle-17.0.8"
```
### **2. build quasar-capacitor**
- requirements node js >14  install node js 
- install yarn package manager
```
yarn create quasar
yarn install
```
- For doing more with Quasar, you should also install the global CLI. With it you can directly run Quasar commands in the terminal, run a local http server for testing or do upgrades on your project.
```
yarn global add @quasar/cli

```
- Add capacitor quasar mode to our quasar project

```
quasar mode add capacitor
cd src-capacitor
yarn install
```

- Use the Gradle Wrapper (gradlew or gradlew.bat) for building your project, which ensures consistent Gradle version usage.
***. need to install gradle (in my case gradle-8.2.1)***
```
export  PATH=$PATH:/usr/local/gradle-8.2.1/bin
```
```
cd android/
gradle wrapper
./gradlew clean
./gradlew build    #prepare the build environement of my app
```
- for preventing issues in the build process it's recommended to update your Android Gradle Plugin for better compatibility and to take advantage of the latest features and optimizations.
***.since i am using gradle-8.2.1 the android gradle plugin that is comptabile is the gradel:8.1.0 we can change that in android/build.gradle file***
```
dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0'
        classpath 'com.google.gms:google-services:4.3.15'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

```

- now we can build our quasar-capacitor app 
```
quasar build -m capacitor -T android
```

### **3.Fastlane automation for google playstore**
- Managed Ruby environment + Bundler
  Bundler is a gem (Ruby package manager) and requires Ruby to be present.
```
sudo dnf install ruby
sudo dnf install ruby-devel
```
- if Ruby is installed, you can proceed to install Bundler using the gem command:
```
sudo gem install bundler
```
```
mkdir ~/.gems
export GEM_HOME="$HOME/.gems"       â‡’bashrc
export PATH="$GEM_HOME/bin:$PATH"
source ~/.bashrc

```
- Create a ./Gemfile in the root directory of your project with the content
source "https://rubygems.org"
gem "fastlane

```

bundle update #this will create a Gemfile.lock 

```
```
fastlane init ####this will create a fastlane folder >Appfile and Fastfile

```

- creating a service account and generating a JSON key file for Google Play Console API access. This key is used to authenticate and authorize access to Google Play Console's APIs, which allows automated tools like Fastlane to interact with your Google Play Developer account. 

  for more details https://docs.fastlane.tools/getting-started/android/setup/


You can use 
```
fastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json 
```
-  test the connection to Google Play Store with the downloaded private key. Once that works, add the path to the JSON file to your Appfile:
json_key_file("path/to/your/play-store-credentials.json")
package_name("my.package.name") => package name here is the name of the capacitor app should be the same as presented in google console


```
fastlane supply init
```
- Fetching App Metadata: Running fastlane supply init downloads and synchronizes your current Google Play store metadata, including app listing details, images, screenshots, and other store-related information. This step sets up Fastlane to manage your app's metadata on the Google Play Store, making it easier to update and maintain your app's listing and assets.

-change Fastfile

```
desc "Builds the debug code"
  lane :buildDebug do
    gradle(task: "assembleDebug")
  end

  desc "Builds the release code"
  lane :buildRelease do
    gradle(task: "assembleRelease")
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Internal Build to Play Store"
  lane :internal do
    upload_to_play_store(track: 'internal', apk: ''app/build/outputs/bundle/release/app-release.aab'')
  end

  desc "Promote Internal to Alpha"
  lane :promote_internal_to_alpha do
    upload_to_play_store(track: 'internal', skip_upload_changelogs: true, track_promote_to: 'alpha')
  end

  desc "Promote Alpha to Beta"
  lane :promote_alpha_to_beta do
    upload_to_play_store(track: 'alpha', skip_upload_changelogs: true, track_promote_to: 'beta')
  end
  ```



Notes:  This keystore is used to digitally sign your app, which helps ensure its authenticity and integrity.
```
 keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 20000
```
we put the password that we want and the alias name=>my-release-key.keystore file is created

- change app/build.gradle
```
Ading this 
signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file("./my-release-key.keystore")
            storePassword "pass1234"
            keyAlias "alias_name"
            keyPassword "pass1234"
        }
    }
```
```
Fastlane buildDebug
Fastlane buildRelease
```

- make push to internal testing in the playconsole
```
fastlane internal_testing

```
